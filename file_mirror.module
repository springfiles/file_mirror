<?php
// Download files from remote ftp and create nodes for every file.
// Load module libraries
require_once ( dirname(__FILE__) . '/includes/file_mirror.xmlrpc.inc');
define('MIRROR_PATH', 'sites/default/files/downloads/spring/'); //path with files that will be mirrored

function file_mirror_menu() {
  $items = array();
  $items['admin/reports/fixcron'] = array(
    'title' => t('Fix cron'),
    'page callback' => 'file_mirror_fix_cron',
    'access arguments' => array('administer file mirror'),
  );
  return $items;
}
/**
* Implementation of hook_block().
*/
function file_mirror_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Mirror block list');
      return $blocks;
    case 'view':
      $blocks['subject'] = t('Download locations');
      $blocks['content'] = 'content';
      return $blocks;
  }
}
/**
* notify upq service about changes
*/

function _file_mirror_notify_upq($url){
	$request = xmlrpc_encode_request("springfiles.upload",
	array(
		"url" => $url,
	));
	$context = stream_context_create(
	array(
		'http'=>
			array(
				'method' => 'POST',
				'header' => "Content-Type: text/xml\r\n".
				"User-Agent: drupal php bot\r\n",
				'escaping' => 'non-ascii',
				'content' => $request,
			)
		)
	);
	$file = file_get_contents('http://api.springfiles.com/xmlrpc.php', false, $context);
	$response = xmlrpc_decode($file);
	if ($response && is_array($response)) {
		if (xmlrpc_is_fault($response)) {
			$msg="xmlrpc: ".$response[faultString]." (".$response[faultCode].")";
		} else {
		$msg=print_r($response, true);
		}
	} else {
		$msg="Invalid response received: ".$file;
	}
	watchdog('file_mirror', $msg);
}

/**
* implementation of hook_nodeapi
* adds filemirror data to node object with attachment files or filefields
*/
function file_mirror_nodeapi(&$node, $op, $teaser) {
  $result = array();
  switch ($op) {
    case 'view' :
      //load and attach author information
      //$user = user_load(array('uid' = $node->author));
      
      //get all file attachments
      if (isset($node->files) && count($node->files) && user_access('view uploaded files') && !$teaser) {
          foreach ($node->files as $key => $file_attachment)
            {
              //attach mirror data to the file attachment array
              $node->files[$key]->mirrors = file_mirror_get_fid_mirrors($file_attachment->fid);
              $node->files[$key]->default_mirror = file_mirror_get_fid_defaultMirror($file_attachment->fid);
            }
      }
      //get all filefield files
      if (module_exists('filefield'))
      {
        foreach (filefield_get_field_list($node->type) as $fieldname => $filefield_data)
        {
          if (count($node->$fieldname)) {
            foreach($node->$fieldname as &$filefield)
            {
              //attach mirror data to the filefield array
              $filefield['mirrors'] = file_mirror_get_fid_mirrors($filefield['fid']);
              $filefield['default_mirror'] = file_mirror_get_fid_defaultMirror($filefield['fid']);
            }
          }
        }
      }
      break;
		case 'insert':
		case 'update':{ //check if file will be uploaded to other mirrors, if so create file to notify local cron job
			if (intval($node->field_file[0]['fid'])>0){
				$pos=strpos($node->field_file[0][filepath], MIRROR_PATH);
				if ($pos!==false){
					if ($pos==0){
//						$fid=$node->field_file[0]['fid'];
						_file_mirror_notify_upq("http://springfiles.com/".$node->field_file[0][filepath]);
					}
				}
			break;
		}
	}
  }
}

/**
@return a random filemirror, excluding master if mirrorcount > 2
TODO: should change this later into the preferred mirror to the client
*/

//FIXME: remove this commented out function
/*

function file_mirror_get_fid_mirrors($fid) {
	$q = db_query("SELECT metadata FROM {file_mirror_data} WHERE nid = %d", array($fid));
	$records = json_decode(db_fetch_object($q));
	$mirrors=$records['mirror'];
	shuffle($mirrors); //randomize result
	return $mirrors;
}

function file_mirror_get_fid_defaultMirror($fid){
	$arr=file_mirror_get_fid_mirrors($fid);
	return $arr[0];
}

*/
//FIXME: and comment these two out (when prequesites are met)
function file_mirror_get_fid_mirrors($fid) {
       $q = db_query("SELECT * FROM {file_mirror_files} m LEFT JOIN {file_mirror} f ON m.fmid = f.fmid WHERE m.active = 1 AND f.active = 1 AND m.fid = %d", array($fid));
       $array = array();
       while ($records = db_fetch_object($q)){
               $array[] = $records;
       }
       $records = db_fetch_object(db_query("SELECT 'springfiles.com' as title, 'NL' as country, filepath as path FROM {files} WHERE fid = %d AND status = 1", array($fid)));
       $records->path = str_replace(file_directory_path(), '', $records->path);
       $records->path = 'downloadmain/'.$fid;
       $array[] = $records;
       shuffle($array);
       return $array;
 }
 
function file_mirror_get_fid_defaultMirror($fid){
	$arr=file_mirror_get_fid_mirrors($fid);
	return $arr[0];
}


/**
* Implementation of hook_xmlrpc
*/
function file_mirror_xmlrpc(){
	$methods[] = array( //deprecated method ( see https://github.com/springfiles/upq )
			'springfiles.search', // xml-rpc method name
			'_file_mirror_xmlsearch', //function in module
			array("string","struct"), //return, function signature
			t('Handling a search request'), //help string
		);
	$methods[] = array(
			'springfiles.getlastsyncid',
			'_file_mirror_getlastsyncid',
			array('string', 'string', 'string'), //return int, username, password
			t('returns the highest sync id, takes username + password as argument'),
	);
	$methods[] = array(
			'springfiles.sync',
			'_file_mirror_sync',
			array("string", "string", "string", "array"), //return string, username, password, metadata
			t("handles update/delete calls from upq"),
		);
	return $methods;
}

//Drupal 6 cron issues workaround
function file_mirror_fix_cron() {
	$q = db_query("DELETE FROM `variable` WHERE name = 'cron_semaphore'");
	$q = db_query("DELETE FROM `variable` WHERE name = 'cron_last'");
	$q = db_query("DELETE FROM `variable` WHERE name = 'cron_threshold_semaphore'");
	return "fixed";
}
