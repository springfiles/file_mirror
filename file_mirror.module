<?php
// Download files from remote ftp and create nodes for every file.
// Load module libraries
require_once ( dirname(__FILE__) . '/includes/file_mirror.xmlrpc.inc');


function file_mirror_menu() {
  $items = array();
  $items['admin/reports/fixcron'] = array(
    'title' => t('Fix cron'),
    'page callback' => 'file_mirror_fix_cron',
    'access arguments' => array('administer file mirror'),
  );
  return $items;
}
/**
* Implementation of hook_block().
*/
function file_mirror_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Philosophical Quotes');
      return $blocks;
    case 'view':
      $blocks['subject'] = t('Download locations');
      $blocks['content'] = 'content';
      return $blocks;
  }
}
/**
* notify cron job about changes
*/
function _file_mirror_notify_upq($fid){
	$timeout=5;
	$file=field_file_load($fid);
	$job="download url:".file_create_url($file['filepath']);
	//FIXME: this should be an xml-rpc call with the http-url?
	$sock = @stream_socket_client('unix:///tmp/.upq-incoming.sock', $errno, $errstr, $timeout);
	if($sock===FALSE){
		watchdog("filemirror", "error connecting to upq socket $errstr $fid");
		return;
	}
	stream_set_timeout($sock, $timeout);
	fwrite($sock, "$job\n");
	$res=fgets($sock);
	fclose($sock);
	watchdog("filemirror", "result from upq: $res");
	return $res;
}

/**
*implementation of hook_nodeapi
*adds filemirror data to $node with attachment files or filefields
*/
function file_mirror_nodeapi(&$node, $op, $teaser) {
  $result = array();
  switch ($op) {
    case 'view' :
      //load and attach author information
      //$user = user_load(array('uid' = $node->author));
      
      //get all file attachments
      if (isset($node->files) && count($node->files) && user_access('view uploaded files') && !$teaser) {
          foreach ($node->files as $key => $file_attachment)
            {
              //attach mirror data to the file attachment array
              $node->files[$key]->mirrors = file_mirror_get_fid_mirrors($node->nid);
              $node->files[$key]->default_mirror = file_mirror_get_fid_defaultMirror($node->nid);
            }
      }
      //get all filefield files
      if (module_exists('filefield'))
      {
        foreach (filefield_get_field_list($node->type) as $fieldname => $filefield_data)
        {
          if (count($node->$fieldname)) {
            foreach($node->$fieldname as &$filefield)
            {
              //attach mirror data to the filefield array
              $filefield['mirrors'] = file_mirror_get_fid_mirrors($filefield['fid']);
              $filefield['default_mirror'] = file_mirror_get_fid_defaultMirror($filefield['fid']);
            }
          }
        }
      }
      break;
		case 'insert':
		case 'update':{ //check if file will be uploaded to other mirrors, if so create file to notify local cron job
			if (intval($node->field_file[0]['fid'])>0){
				$pos=strpos($node->field_file[0][filepath], MIRROR_PATH);
				if ($pos!==false){
					if ($pos==0){
						$fid=$node->field_file[0]['fid'];
						_file_mirror_notify_upq($fid);
					}
				}
			break;
		}
	}
  }
}

/**
@return a random filemirror, excluding master if mirrorcount > 2
TODO: should change this later into the preferred mirror to the client
*/
function file_mirror_get_fid_mirrors($nid) {
	$q = db_query("SELECT metadata FROM {file_mirror_files} WHERE nid = %d", array($nid));
	$records = json_decode(db_fetch_object($q));
	$mirrors=$records['mirror'];
	shuffle($mirrors); //randomize result
	return $mirrors;
}

function file_mirror_get_fid_defaultMirror($nid){
	$arr=file_mirror_get_fid_mirrors($nid);
	return $arr[0];
}

/**
* Implementation of hook_xmlrpc
*/
function file_mirror_xmlrpc(){
	$methods[] = array( //deprecated method ( see https://github.com/springfiles/upq )
			'springfiles.search', // xml-rpc method name
			'_file_mirror_xmlsearch', //function in module
			array("string","struct"), //function signature //FIXME remove "string" (drupal bug?)
			t('Handling a search request'), //help string
		);
	$methods[] = array(
			'springfiles.getlastsyncid',
			'_file_mirror_getlastsyncid',
			array("string", "string", "string"), //username, password
			t('returns the highest sync id, takes username + password as argument'),
	);
	$methods[] = array(
			'springfiles.sync',
			'_file_mirror_sync',
			array("string", "string", "string", "struct"), //username, password, metadata
			t("handles update/delete calls from upq"),
		);
	return $methods;
}

function file_mirror_fix_cron() {
	$q = db_query("DELETE FROM `variable` WHERE name = 'cron_semaphore'");
	$q = db_query("DELETE FROM `variable` WHERE name = 'cron_last'");
	$q = db_query("DELETE FROM `variable` WHERE name = 'cron_threshold_semaphore'");
	return "fixed";
}
